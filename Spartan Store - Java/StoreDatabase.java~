package Spartan;

import BasicIO.*;
import java.io.*;

/** This class represents the database containing and intializing most of the information important to
  * the store. It includes an object of the store catalogue and all customer information.
  * 
  * @author Daniel Sokic
  * 
  * @version  1.0  (Mar.2018)                                                   */

public class StoreDatabase implements Database, Serializable{
  
  private int customerAmount;
  private StoreCatalogue storeCata;
  private int orderNum;
  private Node<StoreCustomer> customerData;
  
  public StoreDatabase( ASCIIDataFile from ){
    
    storeCata = new StoreCatalogue( from );
    customerAmount = from.readInt();
    orderNum = 1000;
    customerData = null;
    
    String userID;
    String userName;
    String userAddress;
    String userPassword;
    
    for( int i = 0; i < customerAmount; i++ ){
      
      userID = from.readString();
      userName = from.readString();
      userAddress = from.readString();
      userPassword = from.readString();
      
      this.addNewCustomer(new StoreCustomer(userID, userName, userAddress, userPassword,
                                            new CustomerCart(orderNum, storeCata)));
    }
    
  }
    
  
  /**This method returns true if the specified userID and password is correct. Will return false
    * if no pairing is found within the database.
    * 
    * @param userID the ID of the customer
    * 
    * @param password the password of the customer
    * 
    * @return boolean if the username and password is correct for the user  */
  
  public boolean checkPassword( String userID, String password ){
    
    Node<StoreCustomer> p = customerData;
    
    while( p != null ){
      if( p.item.getID().equals(userID) ){
        if( p.item.getPassword().equals(password) ){
          return true;
        }
      }
      p = p.next;
    }
    
    return false;
    
  }
  
  /**This method adds a customer to the linked list of customers. Will
    * return an error if the customer's name is already in the database
    * 
    * @param newCustomer the customer to be added
    * 
    * @exception AlreadyExistException user's name was already in the database */
  
  public void addNewCustomer( StoreCustomer newCustomer ){
    
    Node<StoreCustomer> p = customerData;
    
    if(customerData == null){
      customerData = new Node<StoreCustomer>(newCustomer,null);
    }
    else{
      while(p.next != null){
        if(p.item.getUserName().equals(newCustomer.getUserName())){
          System.out.println("P.item name: " + p.item.getUserName());
          System.out.println("newCustomer name: " + newCustomer.getUserName());
          throw new AlreadyExistException();
        }
        else{
          p = p.next;
        }
      }
      
      p.next = new Node<StoreCustomer>(newCustomer, null);
    }
  }
  
  //This method returns the catalogue intialized by the class
  
  public StoreCatalogue getCatalogue(){
    
    return storeCata;
    
  }
  
  /**This method returns the specified Customer by ID
    * 
    * @param userID the ID of the customer
    * 
    * @return StoreCustomer the customr associated with the ID  */
  
  public StoreCustomer getCustomer( String userID ){
    
    Node<StoreCustomer> p = customerData;
    
    while( p != null ){
      if( p.item.getID().equals(userID) ){
        return p.item;
      }
      p = p.next;
    }
  
    return null;
    
  }


} //LoginDatabase